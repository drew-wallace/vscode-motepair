// Generated by CoffeeScript 1.10.0
(function () {
	var vscode = require('vscode');
	var ncp = require("copy-paste").global();
	var crypto = require("crypto");
	var VSCodeShare, EventHandler, WebSocket;

	EventHandler = require('./event_handler');

	VSCodeShare = require('./vscode_share');

	WebSocket = require('ws');

	process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

	module.exports = {

		/* Public */
		version: require('../package.json').version,
		setDefaultValues: function () {
			this.workspace = vscode.workspace;
			this.window = vscode.window;
			this.address = this.workspace.getConfiguration('motepair').get('serverAddress');
			this.portNumber = this.workspace.getConfiguration('motepair').get('serverPort');
			return this.secureConnection = this.workspace.getConfiguration('motepair').get('secureConnection');
		},
		createSocketConnection: function () {
			var proto;
			this.setDefaultValues();
			proto = this.secureConnection ? 'wss' : 'ws';
			return new WebSocket(proto + "://" + this.address + ":" + this.portNumber);
		},
		activate: function (context) {
			this.context = context;
			this.setDefaultValues();
			var motepairConnect = vscode.commands.registerCommand('extension.motepair.connect', (function (_this) {
				return function () {
					return _this.startSession();
				};
			})(this));
			var motepairDisconnect = vscode.commands.registerCommand('extension.motepair.disconnect', (function (_this) {
				return function () {
					return _this.deactivate();
				};
			})(this));
			this.context.subscriptions.push(motepairConnect);
			this.context.subscriptions.push(motepairDisconnect);
		},
		startSession: function () {
			var sessionId = crypto.randomBytes(8).toString('hex');
			vscode.window.showInputBox({
				prompt: "Enter a string to identify this share session",
				value: sessionId
			}).then((function (_this) {
				return function (userDefinedSessionId) {
					return _this.connect(userDefinedSessionId);
				};
			})(this));
		},
		setupHeartbeat: function () {
			return this.heartbeatId = setInterval((function (_this) {
				return function () {
					var error, error1;
					try {
						return _this.ws.send('ping', function (error) {
							if (error != null) {
								_this.event_handler.emitter.emit('socket-not-opened');
								return clearInterval(_this.heartbeatId);
							}
						});
					} catch (error1) {
						error = error1;
						_this.event_handler.emitter.emit('socket-not-opened');
						return clearInterval(_this.heartbeatId);
					}
				};
			})(this), 30000);
		},
		connect: function (sessionId) {
			if (this.ws == null) {
				this.ws = this.createSocketConnection();
			}
			this.ws.on("open", (function (_this) {
				return function () {
					vscode.window.showInformationMessage("Motepair: Session started.");
					_this.setupHeartbeat();
					// Removing sharejs because I don't quite understand it well enough to get it to work
					// _this.vscode_share = new VSCodeShare(_this.ws);
					// _this.vscode_share.start(sessionId);
					_this.event_handler = new EventHandler(_this.ws, _this.context.subscriptions);
					_this.event_handler.listen();
					_this.event_handler.emitter.on('socket-not-opened', function () {
						vscode.window.showWarningMessage("Motepair: Connection get lost.");
						return _this.deactivate();
					});
					return ncp.copy(sessionId);
				};
			})(this));
			return this.ws.on('error', (function (_this) {
				return function (e) {
					console.log('error', e);
					vscode.window.showErrorMessage("Motepair: Could not connect to server.");
					_this.ws.close();
					return _this.ws = null;
				};
			})(this));
		},
		deactivate: function () {
			clearInterval(this.heartbeatId);
			if (this.ws != null) {
				vscode.window.showInformationMessage("Motepair: Disconnected from session.");
				this.ws.close();
				this.ws = null;
				// this.event_handler.subscriptions.dispose();
				// return this.vscode_share.subscriptions.dispose();
			} else {
				vscode.window.showWarningMessage("Motepair: No active session found.");
			}
		}
	};

}).call(this);
