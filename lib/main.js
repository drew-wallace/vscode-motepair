// Generated by CoffeeScript 1.10.0
(function() {
  var vscode = require('vscode');
  var ncp = require("copy-paste").global();
  var AtomShare, EventHandler, NewSessionView, RemoteCursorView, SessionView, WebSocket;

  EventHandler = require('./event_handler');

  AtomShare = require('./atom_share');

  WebSocket = require('ws');

  NewSessionView = require('./new-session-view');

  SessionView = require('./session-view');

  RemoteCursorView = require('./remote-cursor-view');

  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

  module.exports = {

    /* Public */
    version: require('../package.json').version,
    config: {
      serverAddress: {
        title: 'Server address',
        type: 'string',
        "default": 'wss.motepair.com'
      },
      serverPort: {
        title: 'Server port number',
        type: 'integer',
        "default": 80
      },
      secureConnection: {
        title: 'Secure Connection',
        type: 'boolean',
        "default": false
      },
      userEmail: {
        title: 'Email address',
        type: 'string',
        "default": ''
      },
      syncTabs: {
        title: 'Sync Tabs',
        type: 'boolean',
        "default": true
      }
    },
    setDefaultValues: function() {
      this.address = vscode.workspace.getConfiguration('motepair.serverAddress');
	    this.portNumber = vscode.workspace.getConfiguration('motepair.serverPort');
      return this.secureConnection = this.secureConnection = vscode.workspace.getConfiguration('motepair.secureConnection');
    },
    createSocketConnection: function() {
      var proto;
      this.setDefaultValues();
      proto = this.secureConnection ? 'wss' : 'ws';
      return new WebSocket(proto + "://" + this.address + ":" + this.portNumber);
    },
    activate: function (c) {
      this.context = c;
      this.setDefaultValues();
      var motepairConnect = vscode.commands.registerCommand('extension.motepair.connect', (function(_this) {
        return function() {
          return _this.startSession();
        };
      })(this));
      var motepairDisconnect = vscode.commands.registerCommand('extension.motepair.disconnect', (function(_this) {
        return function() {
          return _this.deactivate();
        };
      })(this));
      this.context.subscriptions.push(motepairConnect);
      this.context.subscriptions.push(motepairDisconnect);
    },
    startSession: function() {
      this.view = new NewSessionView();
      this.view.show();
      var motepairCoreConfirm = vscode.commands.registerCommand('extension.motepair.core.confirm', (function(_this) {
        return function() {
          if (_this.view.miniEditor.getText() !== '') {
            return _this.connect(_this.view.miniEditor.getText());
          } else {
            return vscode.window.showWarningMessage("Motepair: Session ID can not be empty.");
          }
        };
      })(this));
      return this.context.subscriptions.push(motepairCoreConfirm);
    },
    setupHeartbeat: function() {
      return this.heartbeatId = setInterval((function(_this) {
        return function() {
          var error, error1;
          try {
            return _this.ws.send('ping', function(error) {
              if (error != null) {
                _this.event_handler.emitter.emit('socket-not-opened');
                return clearInterval(_this.heartbeatId);
              }
            });
          } catch (error1) {
            error = error1;
            _this.event_handler.emitter.emit('socket-not-opened');
            return clearInterval(_this.heartbeatId);
          }
        };
      })(this), 30000);
    },
    connect: function(sessionId) {
      if (this.ws == null) {
        this.ws = this.createSocketConnection();
      }
      this.ws.on("open", (function(_this) {
        return function() {
          vscode.window.showInformationMessage("Motepair: Session started.");
          _this.setupHeartbeat();
          _this.atom_share = new AtomShare(_this.ws);
          _this.atom_share.start(sessionId);
          _this.event_handler = new EventHandler(_this.ws);
          _this.event_handler.listen();
          _this.event_handler.emitter.on('socket-not-opened', function() {
            atom.notifications.addWarning("Motepair: Connection get lost.");
            return _this.deactivate();
          });
          _this.sessionStatusView = new SessionView;
          _this.sessionStatusView.show(_this.view.miniEditor.getText());
          return ncp.copy(_this.view.miniEditor.getText());
        };
      })(this));
      return this.ws.on('error', (function(_this) {
        return function(e) {
          console.log('error', e);
          vscode.window.showErrorMessage("Motepair: Could not connect to server.");
          _this.ws.close();
          return _this.ws = null;
        };
      })(this));
    },
    deactivate: function() {
      clearInterval(this.heartbeatId);
      if (this.ws != null) {
        vscode.window.showInformationMessage("Motepair: Disconnected from session.");
        this.sessionStatusView.hide();
        this.ws.close();
        this.ws = null;
        this.event_handler.subscriptions.dispose();
        return this.atom_share.subscriptions.dispose();
      } else {
        vscode.window.showWarningMessage("Motepair: No active session found.");
      }
    }
  };

}).call(this);
