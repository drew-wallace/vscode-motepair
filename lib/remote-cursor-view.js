// Generated by CoffeeScript 1.10.0
(function() {
  var Point, RemoteCursorView, View, crypto,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Point = require('atom').Point;

  View = require('atom-space-pen-views').View;

  crypto = require('crypto');

  RemoteCursorView = (function(superClass) {
    extend(RemoteCursorView, superClass);

    function RemoteCursorView() {
      return RemoteCursorView.__super__.constructor.apply(this, arguments);
    }

    RemoteCursorView.prototype.initialize = function(editor, position, userEmail) {
      this.editor = editor;
      this.marker = this.editor.markBufferPosition(Point.fromObject(position));
      this.decoration = this.editor.decorateMarker(this.marker, {
        type: 'overlay',
        item: this,
        position: 'head'
      });
      this.lineHeightInPixels = this.editor.getLineHeightInPixels();
      this.height(this.lineHeightInPixels);
      this.setCursorPosition(position);
      return this.setGravatar(userEmail, Math.round(1.5 * this.lineHeightInPixels));
    };

    RemoteCursorView.prototype.setCursorPosition = function(newPosition) {
      var itemHeight, pixelPosition, position, top;
      position = Point.fromObject(newPosition);
      pixelPosition = this.editor.pixelPositionForScreenPosition(position, true);
      itemHeight = this.element.offsetHeight;
      top = pixelPosition.top + this.lineHeightInPixels;
      if (top + itemHeight - this.editor.getScrollTop() > this.editor.getHeight() && top - itemHeight - this.lineHeightInPixels >= this.editor.getScrollTop()) {
        this.css({
          transform: 'translate(0, 100%)'
        });
      } else {
        this.css({
          transform: 'translate(0, -100%)'
        });
      }
      return this.marker.setHeadBufferPosition(position);
    };

    RemoteCursorView.prototype.setGravatar = function(email, size) {
      var emailHash, md5;
      if (!((email != null ? email.length : void 0) > 0)) {
        return;
      }
      md5 = crypto.createHash('md5');
      emailHash = md5.update(email).digest('hex');
      this.gravatar.attr({
        src: "https://s.gravatar.com/avatar/" + emailHash + "?s=" + size
      });
      this.gravatar.attr({
        alt: email
      });
      return this.gravatar.show();
    };

    RemoteCursorView.content = function() {
      return this.div({
        "class": 'mp-cursor'
      }, (function(_this) {
        return function() {
          return _this.img({
            "class": 'mp-gravatar',
            outlet: 'gravatar'
          });
        };
      })(this));
    };

    return RemoteCursorView;

  })(View);

  module.exports = RemoteCursorView;

}).call(this);
