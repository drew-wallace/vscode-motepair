// Generated by CoffeeScript 1.10.0
(function () {
	var vscode = require('vscode');
	var EventEmitter, EventHandler, RemoteCursorView, fs, ref,
		indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	EventEmitter = require('events').EventEmitter;

	RemoteCursorView = require('./remote-cursor-view');

	fs = require('fs');

	EventHandler = (function () {
		function EventHandler(remoteClient) {
			this.remoteClient = remoteClient;
			this.emitter = new EventEmitter;
			this.workspace = vscode.workspace;
			this.projectPath = this.workspace.rootPath;
			this.window = vscode.window;
			this.subscriptions = [];
			this.localChange = false;
			this.userEmail = this.workspace.getConfiguration('motepair.userEmail');
			this.lastCursorChange = new Date().getTime();
			this.remoteAction = false;
			this.syncTabsEvents = ['open', 'close'];
		}

		EventHandler.prototype.onopen = function (data) {
			var path;
			path = this.projectPath + "/" + data.file;
			this.remoteAction = true;
			this.workspace.openTextDocument(path);
			return setTimeout((function (_this) {
				return function () {
					return _this.remoteAction = false;
				};
			})(this), 300);
		};

		EventHandler.prototype.onclose = function (data) {
			var closedItem;
			closedItem = null;
			this.window.visibleTextEditors().forEach(function (item) {
				var ref1;
				if ((item && item.document.fileName) && ((ref1 = item.document.fileName) != null ? ref1.indexOf(data.file) : void 0) >= 0) {
					return closedItem = item;
				}
			});
			this.remoteAction = true;
			// this.window.activeTextEditor.hide();
			vscode.commands.executeCommand('workbench.action.closeActiveEditor');
			return setTimeout((function (_this) {
				return function () {
					return _this.remoteAction = false;
				};
			})(this), 300);
		};

		EventHandler.prototype.onsave = function (data) {
			return this.window.visibleTextEditors().forEach(function (item) {
				var ref1;
				if ((item && item.document.fileName) && ((ref1 = item.document.fileName) != null ? ref1.indexOf(data.file) : void 0) >= 0) {
					return item.document.save();
				}
			});
		};

		EventHandler.prototype.onselect = function (data) {
			var editor, ref1;
			editor = this.window.activeTextEditor();
			if (!((editor != null) && (editor.document.fileName != null) && data.file === this.workspace.asRelativePath(editor.document.fileName))) {
				return;
			}
			// if ((ref1 = editor.selectionMarker) != null) {
			// 	ref1.destroy();
			// }
			if (!data.select.start.compareTo(editor.selection.start)) {
				// if (editor.markBufferRange == null) {
				// 	return;
				// }
				editor.selectionMarker = editor.markBufferRange(Range.fromObject(data.select), {
					invalidate: 'never'
				});
				return editor.decorateMarker(editor.selectionMarker, {
					type: 'highlight',
					"class": 'mp-selection'
				});
			}
		};

		EventHandler.prototype.oncursor = function (data) {
			var editor, ref1;
			editor = this.window.activeTextEditor();
			if (!((editor != null) && (editor.getPath != null) && (editor.markBufferPosition != null) && data.file === this.workspace.asRelativePath(editor.getPath()))) {
				return;
			}
			if ((ref1 = editor.remoteCursor) != null) {
				ref1.marker.destroy();
			}
			editor.remoteCursor = new RemoteCursorView(editor, data.cursor, data.userEmail);
			this.setGravatarDuration(editor);
			return editor.scrollToBufferPosition(data.cursor, {
				center: true
			});
		};

		EventHandler.prototype.setGravatarDuration = function (editor) {
			var gravatarDelay, now;
			gravatarDelay = 1500;
			now = new Date().getTime();
			if (now - this.lastCursorChange < gravatarDelay) {
				clearInterval(this.gravatarTimeoutId);
			}
			this.gravatarTimeoutId = setTimeout((function (_this) {
				return function () {
					var ref1;
					return (ref1 = editor.remoteCursor) != null ? ref1.gravatar.hide(300) : void 0;
				};
			})(this), gravatarDelay);
			return this.lastCursorChange = now;
		};

		EventHandler.prototype.sendFileEvents = function (type, file) {
			var data;
			data = {
				a: 'meta',
				type: type,
				data: {
					file: this.workspace.asRelativePath(file)
				}
			};
			if (!this.remoteAction) {
				return this.sendMessage(data);
			}
		};

		EventHandler.prototype.sendMessage = function (data) {
			var e, error;
			try {
				return this.remoteClient.send(JSON.stringify(data));
			} catch (error) {
				e = error;
				return this.emitter.emit('socket-not-opened');
			}
		};

		EventHandler.prototype.listen = function () {
			this.remoteClient.on('message', (function (_this) {
				return function (event) {
					var ref1;
					event = JSON.parse(event);
					if (_this["on" + event.type] != null) {
						if (_this.workspace.getConfiguration.get('motepair.syncTabs') || (ref1 = event.type, indexOf.call(_this.syncTabsEvents, ref1) < 0)) {
							return _this["on" + event.type](event.data);
						}
					}
				};
			})(this));
			this.subscriptions.push(this.window.onDidChangeTextEditorSelection((function (_this) {
				return function (selections, editor) {
					var data;
					// if (editor.suppress) {
					// 	return;
					// }
					data = {
						a: 'meta',
						type: 'cursor',
						data: {
							file: _this.workspace.asRelativePath(editor.document.fileName),
							cursor: selections[0].active,
							userEmail: _this.userEmail
						}
					};
					return setTimeout(function () {
						return _this.sendMessage(data);
					}, 0);
				};
			})(this)));
			this.subscriptions.push(editor.onDidChangeSelectionRange((function (_this) {
				return function (event) {
					var data;
					data = {
						a: 'meta',
						type: 'select',
						data: {
							file: _this.workspace.asRelativePath(editor.getPath()),
							select: event.newBufferRange
						}
					};
					return setTimeout(function () {
						return _this.sendMessage(data);
					}, 0);
				};
			})(this)));
			this.subscriptions.push(editor.onDidSave((function (_this) {
				return function (event) {
					return _this.sendFileEvents('save', event.path);
				};
			})(this)));
			this.subscriptions.push(this.workspace.onWillDestroyPaneItem((function (_this) {
				return function (event) {
					var base, base1;
					if ((typeof (base = event.item).getPath === "function" ? base.getPath() : void 0) == null) {
						return;
					}
					if (typeof (base1 = event.item).detachShareJsDoc === "function") {
						base1.detachShareJsDoc();
					}
					return _this.sendFileEvents('close', event.item.getPath());
				};
			})(this)));
			return this.subscriptions.push(this.workspace.onDidChangeActivePaneItem((function (_this) {
				return function (event) {
					if (!((event != null) && (event.getPath != null) && (event.getPath() != null) && event.getPath().match(new RegExp(_this.projectPath)) !== null)) {
						return;
					}
					return _this.sendFileEvents('open', event.getPath());
				};
			})(this)));
		};

		return EventHandler;

	})();

	module.exports = EventHandler;

}).call(this);
